// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: tell.proto

package tell

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TellEvenNumberServiceClient is the client API for TellEvenNumberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TellEvenNumberServiceClient interface {
	// unary
	IsEven(ctx context.Context, in *Number, opts ...grpc.CallOption) (*NumberIsEven, error)
	IsEvenUsingList(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*NumberIsEvenList, error)
	// server side streaming
	IsEvenServerStreaming(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (TellEvenNumberService_IsEvenServerStreamingClient, error)
	// client side streaming
	IsEvenClientStreaming(ctx context.Context, opts ...grpc.CallOption) (TellEvenNumberService_IsEvenClientStreamingClient, error)
	// bidirectional streaming
	IsEvenBidiStreaming(ctx context.Context, opts ...grpc.CallOption) (TellEvenNumberService_IsEvenBidiStreamingClient, error)
	// test optional field
	HeartBeat(ctx context.Context, in *HeartBeatPing, opts ...grpc.CallOption) (*HeartBeatPong, error)
}

type tellEvenNumberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTellEvenNumberServiceClient(cc grpc.ClientConnInterface) TellEvenNumberServiceClient {
	return &tellEvenNumberServiceClient{cc}
}

func (c *tellEvenNumberServiceClient) IsEven(ctx context.Context, in *Number, opts ...grpc.CallOption) (*NumberIsEven, error) {
	out := new(NumberIsEven)
	err := c.cc.Invoke(ctx, "/tell_even_number.TellEvenNumberService/IsEven", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellEvenNumberServiceClient) IsEvenUsingList(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*NumberIsEvenList, error) {
	out := new(NumberIsEvenList)
	err := c.cc.Invoke(ctx, "/tell_even_number.TellEvenNumberService/IsEvenUsingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellEvenNumberServiceClient) IsEvenServerStreaming(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (TellEvenNumberService_IsEvenServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &TellEvenNumberService_ServiceDesc.Streams[0], "/tell_even_number.TellEvenNumberService/IsEvenServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &tellEvenNumberServiceIsEvenServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TellEvenNumberService_IsEvenServerStreamingClient interface {
	Recv() (*NumberIsEven, error)
	grpc.ClientStream
}

type tellEvenNumberServiceIsEvenServerStreamingClient struct {
	grpc.ClientStream
}

func (x *tellEvenNumberServiceIsEvenServerStreamingClient) Recv() (*NumberIsEven, error) {
	m := new(NumberIsEven)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tellEvenNumberServiceClient) IsEvenClientStreaming(ctx context.Context, opts ...grpc.CallOption) (TellEvenNumberService_IsEvenClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &TellEvenNumberService_ServiceDesc.Streams[1], "/tell_even_number.TellEvenNumberService/IsEvenClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &tellEvenNumberServiceIsEvenClientStreamingClient{stream}
	return x, nil
}

type TellEvenNumberService_IsEvenClientStreamingClient interface {
	Send(*Number) error
	CloseAndRecv() (*NumberIsEvenList, error)
	grpc.ClientStream
}

type tellEvenNumberServiceIsEvenClientStreamingClient struct {
	grpc.ClientStream
}

func (x *tellEvenNumberServiceIsEvenClientStreamingClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tellEvenNumberServiceIsEvenClientStreamingClient) CloseAndRecv() (*NumberIsEvenList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumberIsEvenList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tellEvenNumberServiceClient) IsEvenBidiStreaming(ctx context.Context, opts ...grpc.CallOption) (TellEvenNumberService_IsEvenBidiStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &TellEvenNumberService_ServiceDesc.Streams[2], "/tell_even_number.TellEvenNumberService/IsEvenBidiStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &tellEvenNumberServiceIsEvenBidiStreamingClient{stream}
	return x, nil
}

type TellEvenNumberService_IsEvenBidiStreamingClient interface {
	Send(*Number) error
	Recv() (*NumberIsEven, error)
	grpc.ClientStream
}

type tellEvenNumberServiceIsEvenBidiStreamingClient struct {
	grpc.ClientStream
}

func (x *tellEvenNumberServiceIsEvenBidiStreamingClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tellEvenNumberServiceIsEvenBidiStreamingClient) Recv() (*NumberIsEven, error) {
	m := new(NumberIsEven)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tellEvenNumberServiceClient) HeartBeat(ctx context.Context, in *HeartBeatPing, opts ...grpc.CallOption) (*HeartBeatPong, error) {
	out := new(HeartBeatPong)
	err := c.cc.Invoke(ctx, "/tell_even_number.TellEvenNumberService/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TellEvenNumberServiceServer is the server API for TellEvenNumberService service.
// All implementations must embed UnimplementedTellEvenNumberServiceServer
// for forward compatibility
type TellEvenNumberServiceServer interface {
	// unary
	IsEven(context.Context, *Number) (*NumberIsEven, error)
	IsEvenUsingList(context.Context, *Numbers) (*NumberIsEvenList, error)
	// server side streaming
	IsEvenServerStreaming(*Numbers, TellEvenNumberService_IsEvenServerStreamingServer) error
	// client side streaming
	IsEvenClientStreaming(TellEvenNumberService_IsEvenClientStreamingServer) error
	// bidirectional streaming
	IsEvenBidiStreaming(TellEvenNumberService_IsEvenBidiStreamingServer) error
	// test optional field
	HeartBeat(context.Context, *HeartBeatPing) (*HeartBeatPong, error)
	mustEmbedUnimplementedTellEvenNumberServiceServer()
}

// UnimplementedTellEvenNumberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTellEvenNumberServiceServer struct {
}

func (UnimplementedTellEvenNumberServiceServer) IsEven(context.Context, *Number) (*NumberIsEven, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEven not implemented")
}
func (UnimplementedTellEvenNumberServiceServer) IsEvenUsingList(context.Context, *Numbers) (*NumberIsEvenList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEvenUsingList not implemented")
}
func (UnimplementedTellEvenNumberServiceServer) IsEvenServerStreaming(*Numbers, TellEvenNumberService_IsEvenServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method IsEvenServerStreaming not implemented")
}
func (UnimplementedTellEvenNumberServiceServer) IsEvenClientStreaming(TellEvenNumberService_IsEvenClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method IsEvenClientStreaming not implemented")
}
func (UnimplementedTellEvenNumberServiceServer) IsEvenBidiStreaming(TellEvenNumberService_IsEvenBidiStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method IsEvenBidiStreaming not implemented")
}
func (UnimplementedTellEvenNumberServiceServer) HeartBeat(context.Context, *HeartBeatPing) (*HeartBeatPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedTellEvenNumberServiceServer) mustEmbedUnimplementedTellEvenNumberServiceServer() {}

// UnsafeTellEvenNumberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TellEvenNumberServiceServer will
// result in compilation errors.
type UnsafeTellEvenNumberServiceServer interface {
	mustEmbedUnimplementedTellEvenNumberServiceServer()
}

func RegisterTellEvenNumberServiceServer(s grpc.ServiceRegistrar, srv TellEvenNumberServiceServer) {
	s.RegisterService(&TellEvenNumberService_ServiceDesc, srv)
}

func _TellEvenNumberService_IsEven_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellEvenNumberServiceServer).IsEven(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tell_even_number.TellEvenNumberService/IsEven",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellEvenNumberServiceServer).IsEven(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellEvenNumberService_IsEvenUsingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellEvenNumberServiceServer).IsEvenUsingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tell_even_number.TellEvenNumberService/IsEvenUsingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellEvenNumberServiceServer).IsEvenUsingList(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellEvenNumberService_IsEvenServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Numbers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TellEvenNumberServiceServer).IsEvenServerStreaming(m, &tellEvenNumberServiceIsEvenServerStreamingServer{stream})
}

type TellEvenNumberService_IsEvenServerStreamingServer interface {
	Send(*NumberIsEven) error
	grpc.ServerStream
}

type tellEvenNumberServiceIsEvenServerStreamingServer struct {
	grpc.ServerStream
}

func (x *tellEvenNumberServiceIsEvenServerStreamingServer) Send(m *NumberIsEven) error {
	return x.ServerStream.SendMsg(m)
}

func _TellEvenNumberService_IsEvenClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TellEvenNumberServiceServer).IsEvenClientStreaming(&tellEvenNumberServiceIsEvenClientStreamingServer{stream})
}

type TellEvenNumberService_IsEvenClientStreamingServer interface {
	SendAndClose(*NumberIsEvenList) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type tellEvenNumberServiceIsEvenClientStreamingServer struct {
	grpc.ServerStream
}

func (x *tellEvenNumberServiceIsEvenClientStreamingServer) SendAndClose(m *NumberIsEvenList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tellEvenNumberServiceIsEvenClientStreamingServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TellEvenNumberService_IsEvenBidiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TellEvenNumberServiceServer).IsEvenBidiStreaming(&tellEvenNumberServiceIsEvenBidiStreamingServer{stream})
}

type TellEvenNumberService_IsEvenBidiStreamingServer interface {
	Send(*NumberIsEven) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type tellEvenNumberServiceIsEvenBidiStreamingServer struct {
	grpc.ServerStream
}

func (x *tellEvenNumberServiceIsEvenBidiStreamingServer) Send(m *NumberIsEven) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tellEvenNumberServiceIsEvenBidiStreamingServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TellEvenNumberService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellEvenNumberServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tell_even_number.TellEvenNumberService/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellEvenNumberServiceServer).HeartBeat(ctx, req.(*HeartBeatPing))
	}
	return interceptor(ctx, in, info, handler)
}

// TellEvenNumberService_ServiceDesc is the grpc.ServiceDesc for TellEvenNumberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TellEvenNumberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tell_even_number.TellEvenNumberService",
	HandlerType: (*TellEvenNumberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsEven",
			Handler:    _TellEvenNumberService_IsEven_Handler,
		},
		{
			MethodName: "IsEvenUsingList",
			Handler:    _TellEvenNumberService_IsEvenUsingList_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _TellEvenNumberService_HeartBeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IsEvenServerStreaming",
			Handler:       _TellEvenNumberService_IsEvenServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IsEvenClientStreaming",
			Handler:       _TellEvenNumberService_IsEvenClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "IsEvenBidiStreaming",
			Handler:       _TellEvenNumberService_IsEvenBidiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tell.proto",
}
